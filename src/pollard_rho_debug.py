import ECC_special as secc
import ECC as ecc

import argparse


parser = argparse.ArgumentParser(description="How to Use crack_rho.py")
parser.add_argument("--x",
                    help="X coordinate (hexadecimal) of the elliptic curve cipher targeted for attack",
                    type=str,
                    required=True)
parser.add_argument("--y",
                    help="Y coordinate (hexadecimal) of the target elliptic curve cipher If all you have is the X coordinate, use the included compression tool to obtain the Y coordinate.",
                    type=str,
                    required=True)

parser.add_argument("--bits_size",
                    help="Array length (decimal) The length of the array is generated by 2^bits_size",
                    type=int,
                    default=16)



def main():
    args = parser.parse_args()
    p = int(args.prime, 16)
    n = int(args.order, 16)
    x = int(args.x, 16)
    y = int(args.y, 16)
    bits_size = int(args.bits_size)

    print("-" * 20)
    print()
    print(f"Modulo prime number   : {format(p, '064x')}")
    print(f"Order                 : {format(n, '064x')}")
    print(f"Point X               : {format(x, '064x')}")
    print(f"Point y               : {format(y, '064x')}")
    print()
    print("-" * 20)
    print()

    Y  = secc.Point(x, secc.Point.Gy)
    G  = ecc.Point(ecc.Point.Gx, ecc.Point.Gy)

    x = Y.discrete_log_rho_vetor_method(bits_size=bits_size)
    if x == None:
        exit(0)
    print("Validation...")
    assert G * x == Y
    print("OK.")
    print(f"Private Key : {format(x, '064x')}")

    file = open("FOUND_KEYS.txt", "w+")
    file.writelines(format(x, '064x'))
    file.close()
    
if __name__ == "__main__":
    main()